---
layout: post
title: "Spinning a Stack for Rails 3"
date: 2010-03-20 07:42
author: Austin Putman
comments: true
published: false
categories: 
---
Use edge rails.  Since the pre-release gem, mostly they are fixing bugs and cleaning the codebase.  That means that, odds are, an edge checkout is likely to be cleaner and more bug-free than the pre-release gem.

Wrapping my head around bundler took a couple of hours, during which I made some significant detours back to doing things the old-fashioned way and checking out my gems as plugins in order to use a 'rails3' branch.  Turns out, this is totally unnecessary.  To use the rails3 branch of a gem from github, add the following to your rakefile:
``` ruby
	gem "factory_girl",  :git => "git://github.com/thoughtbot/factory_girl.git", :branch => "rails3"
```

`bundle install` will then checkout, branch, and embed this gem for you.  bundler is not just a gem manager, it's a dependencies manager.  I have high hopes to see how the community will take advantage of this shift.
If you wonder "where are my gems", the ones you had already installed stay in your system folder.  New gems downloaded by bundler are placed under a .bundle folder in your user home folder.
One thing to note, command-line utilities like compass still need to be gem installed to your system, along with any dependencies.  The bundled gems are available within the ruby runtime but not necessarily in the environment.

Mongrel doesn't seem to run in development mode at the moment.  To get it going, you'll need to add these lines to your Gemfile:
``` ruby
	group :mongrel do
		gem "mongrel"
		gem "cgi_multipart_eof_fix"
		gem "fastthread"
		gem "mongrel_experimental"
	end
```
Authentication:

Clearance appears to not be ready for rails 3, due to a number of dependency issues.  I'm a big fan of outsourcing to Rack, so when I ran into [devise](http://github.com/plataformatec/devise), I was intrigued.  Big points for the generators working out of the box with Rails 3.  One oddity was that it used deprecated methods in the config/initializers/session_store.rb, but this may be the cost of Rails 2/3 support.  I really love the idea of being able to attach authenticatability, and all the supporting functionality implied with that, to multiple classes in your app.  Rather that having to keep track of whether a controller is for admins or organizers, I can have the code declare `authenticate_admin!` and `authenticate_organizer!`.  Woot.

Inherited_resources is the new make_resourceful, a clean way to have your controllers behave as expected without unsightly magic method definitions.  It's completely ready for Rails 3.


Testing:

I really love Rspec.  I cut my TDD teeth on it.  But I am envious of the speed and agility supplied by lighter testing frameworks.  So I'm taking Rails 3 as a chance to give another try to Test::Unit.  The core lessons of BDD have been absorbed back into this library, and of course, it's available wherever you find Ruby.
I'm not willing to part with my *shoulds* so easily though.  I'm bringing matchy along, as a should-flavored security blanket.  The maintained version of matchy is called mcmire-matchy ( didn't we all agree to stop prefixing names when we moved to gemcutter?  ).  I'll also need a mocking framework, and I'm looking at rr as the likely candidate.  Fixtures will be provided by the regular 'factory_girl', who thankfully has a rails3 branch that seems to work just fine.
I recently discovered spork and in Rspec it changes my life.  While there is a test-unit compatibility library, it appears to not be working with rails 3 at this time.
I considered using shoulda, but reviewing its features vs the changes that test-unit has made in the last year, it doesn't add much at this point.  Mostly the custom matchers, and I don't use those much anyway.
I highly recommend the gems 'redgreen' and 'autotest-growl' for running autotest with local development.  


Tools:

Friendly_Id is my go-to for nice permalinks, and Rails 3 support is still pending for this library.


User Interface:
I'm using, haml and Sass via compass.  Also jQuery with Uniform to tart up my basic forms a bit.

All javascript previously generated by Rails is now dependent on an external file, rails.js.  If you use jQuery instead of prototype, you'll need a copy of the file from github.com/rails/jquery-ujs.  This applies event to non-obvious uses of javascript, such as link_to :method => :delete.
